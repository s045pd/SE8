"""
Django settings for SE8 project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from os import getenv
from pathlib import Path

from celery.schedules import crontab
from dotenv import load_dotenv

load_dotenv()


def env_bool(var_name: str, defaults: bool = False) -> bool:
    return str(getenv(var_name, str(defaults))).lower() == "True".lower()


SECRET_KEY = "django-insecure-f%8kbec0rm*9yn5q9)mjgj&e^u7_p*$lu_=lgj=aib1cb(@9+a"

DEBUG: bool = env_bool("DEBUG")
BASE_DIR: Path = Path(__file__).resolve().parent.parent
VOL_DIR: Path = Path(getenv("VOL_DIR", BASE_DIR / "vol")).resolve()


for _ in [
    STATIC_ROOT := (VOL_DIR / "static"),
    MEDIA_ROOT := (VOL_DIR / "media"),
    LOGS_DIR := (VOL_DIR / "logs"),
]:
    _.mkdir(parents=True, exist_ok=True)

ALLOWED_HOSTS = [_.strip() for _ in getenv("ALLOWED_HOSTS", "*").split(",") if _]


INSTALLED_APPS = [
    "multi_captcha_admin",  # 验证码组件,必须前置
    "captcha",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "django_celery_results",
    "django_celery_beat",
    "apps",
]

MULTI_CAPTCHA_ADMIN = {
    "engine": "simple-captcha",
}
CAPTCHA_CHALLENGE_FUNCT = "captcha.helpers.math_challenge"

MIDDLEWARE = [
    "apps.middleware.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    # "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "SE8.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "apps/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "SE8.wsgi.application"

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = "zh-hans"
TIME_ZONE = "Asia/Shanghai"
USE_I18N = True
USE_L10N = True
USE_TZ = True

DATABASES = {
    "default": {
        "ATOMIC_REQUESTS": True,
        "ENGINE": "django.db.backends.postgresql",
        "NAME": getenv("DB_DATABASE", "db"),
        "USER": getenv("DB_USER", "user"),
        "PASSWORD": getenv("DB_PASSWORD", ""),
        "HOST": getenv("DB_HOST", "localhost"),
        "PORT": int(getenv("DB_PORT_NUMBER", "5432")),
    }
}

# Redis
REDIS_HOST = getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(getenv("REDIS_PORT_NUMBER", "6379"))
REDIS_PASSWORD = getenv("REDIS_PASSWORD", "")
REDIS_DB = getenv("REDIS_DB", "0")
REDIS_URI = getenv(
    "REDIS_URI",
    f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
)


CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = TIME_ZONE
DJANGO_CELERY_RESULTS_TASK_ID_MAX_LENGTH = 191
CELERY_RESULT_BACKEND = "django-db"
CELERY_TASK_TRACK_STARTED = True
CELERY_RESULT_EXTENDED = True
CELERY_MAX_TASKS_PER_CHILD = 3
CELERY_CACHE_BACKEND = "default"
CELERY_BROKER_URL = REDIS_URI

CELERY_BEAT_SCHEDULE = {
    "auto_fetch_books": {
        "task": "apps.tasks.find_books",
        "schedule": crontab(hour=0),
    },
    "auto_fix_images": {
        "task": "apps.tasks.fix_images",
        "schedule": crontab(hour=1),
    },
    "auto_fix_pdf": {
        "task": "apps.tasks.fix_pdf",
        "schedule": crontab(hour=2),
    },
}

CELERY_ONCE = {
    "backend": "celery_once.backends.Redis",
    "settings": {"url": CELERY_BROKER_URL, "default_timeout": 60 * 60},
}

FILTERS_DEFAULT_LOOKUP_EXPR = "icontains"

REDIS_TIMEOUT = 7 * 24 * 60 * 60

# CACHE
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URI,
        "OPTIONS": {
            "PASSWORD": REDIS_PASSWORD,
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
        },
        "CONFIG": {
            "hosts": [(REDIS_URI,)],
        },
    },
}
CUBES_REDIS_TIMEOUT = 60 * 60
NEVER_REDIS_TIMEOUT = 365 * 24 * 60 * 60


if use_sqlite := env_bool("USE_SQLITE", False):
    DATABASES["default"] = {
        "ATOMIC_REQUESTS": True,
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": (sqlite_db := VOL_DIR / "db.sqlite3"),
        "OPTIONS": {
            "timeout": 20,
        },
    }

    REDIS_URI = f"sqla+sqlite:///{VOL_DIR / 'cache.sqlite3'}"

    CELERY_ONCE = {
        "backend": "celery_once.backends.File",
        "settings": {
            "location": os.path.join(BASE_DIR, "celery_once_locks"),  # 锁文件存储位置
            "default_timeout": 60 * 60,  # 锁的默认超时时间（以秒为单位）
        },
    }

    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
            "LOCATION": "/tmp/django_cache",
        }
    }

    CELERY_BROKER_URL = REDIS_URI


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

# AUTH_USER_MODEL = "users.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = "/static/"
MEDIA_URL = "/media/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose_pretty",
        },
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": str((LOGS_DIR / "app.log").absolute()),
            "formatter": "verbose",
        },
        "sql": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": str((LOGS_DIR / "sql.log").absolute()),
            "formatter": "verbose",
        },
        "task": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": str((LOGS_DIR / "task.log").absolute()),
            "formatter": "verbose",
        },
        "celery": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": str((LOGS_DIR / "celery.log").absolute()),
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["file"],
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.db.backends": {
            "level": "DEBUG",
            "handlers": ["sql"],
            "propagate": False,
        },
        "task": {
            "handlers": ["task", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "celery": {
            "handlers": ["celery", "console"],
            "level": "INFO",
            "propagate": True,
        },
    },
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        },
        "simple": {"format": "%(levelname)s %(message)s"},
        "verbose_pretty": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s%(levelname)s[%(asctime)s]%(blue)s%(filename)s%(white)s:%(cyan)s%(lineno)s\t%(white)s%(message)s",
        },
    },
}
